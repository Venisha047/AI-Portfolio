import { Recipe } from '../types';

// Helper function to wrap text on the canvas
function wrapText(context: CanvasRenderingContext2D, text: string, x: number, y: number, maxWidth: number, lineHeight: number) {
    const words = text.split(' ');
    let line = '';

    for (let n = 0; n < words.length; n++) {
        const testLine = line + words[n] + ' ';
        const metrics = context.measureText(testLine);
        const testWidth = metrics.width;
        if (testWidth > maxWidth && n > 0) {
            context.fillText(line, x, y);
            line = words[n] + ' ';
            y += lineHeight;
        } else {
            line = testLine;
        }
    }
    context.fillText(line, x, y);
    return y + lineHeight;
}

export const generateRecipeCard = async (recipe: Recipe): Promise<void> => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const width = 800;
    const height = 1200;
    const padding = 40;

    canvas.width = width;
    canvas.height = height;

    // Background
    ctx.fillStyle = '#FFF8F0'; // cream
    ctx.fillRect(0, 0, width, height);
    
    // Colors & Fonts
    const primaryColor = '#4A2C2A'; // brown-dark
    const secondaryColor = '#6F4E37'; // brown
    const titleFont = "bold 48px serif";
    const headingFont = "bold 24px sans-serif";
    const bodyFont = "18px sans-serif";

    // Draw Recipe Image
    const image = new Image();
    image.crossOrigin = "anonymous"; // Attempt to prevent canvas tainting for cross-origin images

    const imagePromise = new Promise((resolve, reject) => {
        image.onload = resolve;
        image.onerror = reject;
        // The image URL could be a base64 string, or from Unsplash as a fallback
        image.src = recipe.imageUrl || `https://source.unsplash.com/800x600/?coffee,${recipe.title}`;
    });

    try {
        await imagePromise;
        ctx.drawImage(image, 0, 0, width, 400);
    } catch (e) {
        console.error("Could not load image for recipe card.", e);
        // Draw a placeholder if image fails to load
        ctx.fillStyle = '#EAE0D5';
        ctx.fillRect(0, 0, width, 400);
        ctx.fillStyle = primaryColor;
        ctx.font = '24px sans-serif';
        ctx.textAlign = 'center';
        ctx.fillText('Image not available', width / 2, 200);
    }

    let currentY = 400 + padding;
    ctx.textAlign = 'left';

    // Title
    ctx.fillStyle = primaryColor;
    ctx.font = titleFont;
    currentY = wrapText(ctx, recipe.title, padding, currentY + 20, width - padding * 2, 56);
    currentY += 20;

    // Divider
    ctx.fillStyle = '#D4AF37'; // gold
    ctx.fillRect(padding, currentY, width - padding * 2, 3);
    currentY += 30;
    
    const columnWidth = (width - padding * 3) / 2;
    const ingredientsX = padding;
    const instructionsX = padding * 2 + columnWidth;
    let ingredientsY = currentY;
    let instructionsY = currentY;

    // Ingredients Title
    ctx.fillStyle = primaryColor;
    ctx.font = headingFont;
    ctx.fillText('Ingredients', ingredientsX, ingredientsY);
    ingredientsY += 35;

    // Ingredients List
    ctx.fillStyle = secondaryColor;
    ctx.font = bodyFont;
    recipe.ingredients.forEach(ingredient => {
        ingredientsY = wrapText(ctx, `â€¢ ${ingredient}`, ingredientsX, ingredientsY, columnWidth, 26);
    });

    // Instructions Title
    ctx.fillStyle = primaryColor;
    ctx.font = headingFont;
    ctx.fillText('Instructions', instructionsX, instructionsY);
    instructionsY += 35;

    // Instructions List
    ctx.fillStyle = secondaryColor;
    ctx.font = bodyFont;
    recipe.instructions.forEach((instruction, index) => {
        instructionsY = wrapText(ctx, `${index + 1}. ${instruction}`, instructionsX, instructionsY, columnWidth, 26);
        instructionsY += 10;
    });

    // Footer
    ctx.fillStyle = primaryColor;
    ctx.font = 'italic 16px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('Generated by BrewMuse', width / 2, height - 20);

    // Trigger Download
    const link = document.createElement('a');
    link.download = `BrewMuse-${recipe.title.replace(/[\s/]/g, '-')}.png`;
    link.href = canvas.toDataURL('image/png');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
};
